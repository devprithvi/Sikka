package com.prithvi.sikka.viewmodel

import androidx.lifecycle.ViewModel
import com.prithvi.sikka.SikkaSDK
import com.prithvi.sikka.entity.ExpenseEntity
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import kotlin.time.Clock
import kotlin.time.ExperimentalTime


class ExpenseViewModelImpIos(private val sdk: SikkaSDK) : ExpenseViewModel {

    private val viewModelScope = CoroutineScope(SupervisorJob() + Dispatchers.Main)

    private val _stateI = MutableStateFlow(ExpenseScreenState())
   override  val stateI: StateFlow<ExpenseScreenState> = _stateI.asStateFlow()

    init {
        loadExpensesI()
    }

     override fun loadExpensesI() {
        viewModelScope.launch {
            _stateI.value = _stateI.value.copy(isLoading = true, error = null)
            try {
                val expenses = sdk.getExpanses()
                _stateI.value = _stateI.value.copy(
                    expenses = expenses,
                    isLoading = false
                )
            } catch (e: Exception) {
                _stateI.value = _stateI.value.copy(
                    isLoading = false,
                    error = e.message
                )
            }
        }
    }

     @OptIn(ExperimentalTime::class)
   override  fun addExpenseI(amount: Double, categoryId: String, description: String) {
        viewModelScope.launch {
            try {
                val newExpense = ExpenseEntity(
                    id = 0, // Auto-generated by database
                    amount = amount,
                    categoryId = categoryId,
                    description = description,
                    date = Clock.System.now().toEpochMilliseconds(),
                    createdAt = Clock.System.now().toEpochMilliseconds()
                )
                sdk.addExpense(newExpense)
                loadExpensesI() // Refresh the list
            } catch (e: Exception) {
                _stateI.value = _stateI.value.copy(error = e.message)
            }
        }
    }

    override fun updateExpense(expense: ExpenseEntity) {
        viewModelScope.launch {
            try {
                sdk.updateExpense(expense)
                loadExpensesI() // Refresh the list
            } catch (e: Exception) {
                _stateI.value = _stateI.value.copy(error = e.message)
            }
        }
    }

    override fun deleteExpenseI(expenseId: Int) {
        viewModelScope.launch {
            try {
                sdk.deleteExpense(expenseId)
                loadExpensesI() // Refresh the list
            } catch (e: Exception) {
                _stateI.value = _stateI.value.copy(error = e.message)
            }
        }
    }

     override fun deleteAllExpensesI() {
        viewModelScope.launch {
            try {
                sdk.deleteAllExpenses()
                loadExpensesI() // Refresh the list
            } catch (e: Exception) {
                _stateI.value = _stateI.value.copy(error = e.message)
            }
        }
    }

    override fun deleteSelectedExpenses(expenseIds: List<Int>) {
        viewModelScope.launch {
            try {
                sdk.deleteExpenses(expenseIds)
                loadExpensesI() // Refresh the list
            } catch (e: Exception) {
                _stateI.value = _stateI.value.copy(error = e.message)
            }
        }
    }
}
